{"version":3,"sources":["user.js"],"names":[],"mappings":"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","file":"user-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst router = express.Router();\r\n\r\n/**\r\n * @file /routes/users.js\r\n * @brief 로그인 API\r\n * @author 이장호\r\n * @date 2017-11-14\r\n *\r\n * @body {\r\n *   account: 사용자 ID\r\n *   password: 비밀번호\r\n * }\r\n *\r\n * @sequence\r\n * 1. 입력 값이 모두 입력되었는지 확인\r\n * 2. 아이디에 해당하는 비밀번호가 일치하는지 확인\r\n * 3. 비밀번호가 일치하는 경우 session 정보 설정\r\n *     session.account = account;\r\n *     session.name = name;\r\n *     session.nickname = nickname;\r\n *     session.divider = 1;\r\n *     session.email = email;\r\n *\r\n * @return null\r\n */\r\nrouter.post(\"/login\", (req, res) => {\r\n  let { session } = req;\r\n  const { account } = req.body;\r\n  const passwordOriginal = req.body.password;\r\n\r\n  pool.getConnection((error, connection) => {\r\n    new Promise((resolve, reject) => {\r\n      // 1. 입력 값이 모두 입력되었는지 확인\r\n      if (!(account && passwordOriginal)) {\r\n        const msg = \"Wrong request body in # POST /user/login\";\r\n        reject(msg);\r\n      } else {\r\n        resolve();\r\n      }\r\n    }).then(() => {\r\n      // 2. 아이디에 해당하는 비밀번호가 일치하는지 확인\r\n      const query = `\r\n      SELECT name, nickname, password, divider, email\r\n        FROM user\r\n       WHERE account = \"${account}\"`;\r\n\r\n      queryConductor(connection, query).then((results) => {\r\n        if (results.length === 0) {\r\n          const msg = \"로그인 정보가 잘못되었습니다.\";\r\n          console.log(msg);\r\n          connection.release();\r\n          res.json({status: 404, msg});\r\n        } else {\r\n          const { name, nickname, password, divider, email } = results[0];\r\n\r\n          // 3. 비밀번호가 일치하는 경우 session 정보 설정\r\n          bcrypt.compare(passwordOriginal, password, (error, result) => {\r\n            if (error) {\r\n              const msg = \"Error occurs while COMPARE PASSWORD in # POST /user/login\";\r\n              console.log(error);\r\n              console.log(msg);\r\n              connection.release();\r\n              res.status(500).json({error, msg});\r\n            } else {\r\n              if (result) {\r\n                const user = {\r\n                  account,\r\n                  name,\r\n                  nickname,\r\n                  divider,\r\n                  email\r\n                };\r\n\r\n                session.account = account;\r\n                session.name = name;\r\n                session.nickname = nickname;\r\n                session.divider = divider;\r\n                session.email = email;\r\n\r\n                connection.release();\r\n                res.json({status: 200, user});\r\n              } else {\r\n                const msg = \"로그인 정보가 잘못되었습니다.\";\r\n                console.log(msg);\r\n                connection.release();\r\n                res.json({status: 404, msg});\r\n              }\r\n            }\r\n          })\r\n        }\r\n      }, error => {\r\n        const msg = \"Error occurs while SELECT user in # POST /user/login\"\r\n        console.log(error);\r\n        console.log(msg);\r\n        connection.release();\r\n        res.status(500).json({error, msg});\r\n      })\r\n    }).catch((error) => {\r\n      console.log(error);\r\n      connection.release();\r\n      res.status(400).json({error});\r\n    });\r\n  });\r\n})\r\n/**\r\n * @file /routes/users.js\r\n * @brief 로그아웃 API\r\n * @author 이장호\r\n * @date 2017-11-17\r\n *\r\n * @sequence\r\n * 1. session 에 account 정보가 있는지 확인 (로그인 상태인지 확인)\r\n * 2-1. 로그인 상태이면 session 삭제 후 redirect -> \"/\"\r\n * 2-2. 로그인 상태가 아니라면 redirect -> \"/\"\r\n *\r\n * @return null\r\n */\r\n\r\n.get('/logout', (req, res) => {\r\n  const { session } = req;\r\n\r\n  if (session.account) {\r\n    req.session.destroy(error => {\r\n      if (error) {\r\n        const msg = \"Error occurs while DESTROYING SESSION in # GET /user/logout\";\r\n        console.log(error);\r\n        console.log(msg);\r\n        res.status(500).json({error, msg});\r\n      } else {\r\n        res.redirect(\"/\")\r\n      }\r\n    })\r\n  } else {\r\n    res.redirect(\"/\")\r\n  }\r\n})\r\n/**\r\n * @file /routes/users.js\r\n * @brief 회원가입 API\r\n * @author 이장호\r\n * @date 2017-11-14\r\n *\r\n * @body {\r\n *   account: 사용자 ID\r\n *   name: 사용자 이름\r\n *   nickname: 닉네임\r\n *   password: 비밀번호\r\n *   phone: 핸드폰 번호\r\n *   zipcode: 우편번호\r\n *   address1: 주소\r\n *   address2: 상세주소\r\n *   email: 이메일\r\n *   join_route: 가입경로\r\n *     0: normal\r\n *     1: facebook\r\n *     2: instagram\r\n *     3: kakao\r\n * }\r\n *\r\n * @sequence\r\n * 1. 입력 값이 모두 입력되었는지 확인\r\n * 2. 기존에 id 가 있는지 확인\r\n * 3. 비밀번호 Hash 생성\r\n * 4. user 테이블에 회원정보 입력\r\n * 5. session setting\r\n *\r\n * @return null\r\n */\r\n.post('/', (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    const { account, name, nickname, phone, zipcode, address1, address2, email, join_route } = req.body;\r\n    let { password } = req.body;\r\n\r\n    new Promise((resolve, reject) => {\r\n      if (!(account && password && name && nickname && phone && zipcode && address1 && address2 && email)) {\r\n        const msg = \"Wrong request body in # POST /user\";\r\n        reject(msg)\r\n      } else {\r\n        resolve();\r\n      }\r\n    }).then(() => {\r\n      const query = `\r\n      SELECT account\r\n        FROM user\r\n       WHERE account = \"${account}\"`;\r\n\r\n      queryConductor(connection, query).then((results) => {\r\n        if (results.length > 0) {\r\n          const msg = \"There is already account.\";\r\n          console.log(msg);\r\n          connection.release();\r\n          res.status(403).json({msg});\r\n        } else {\r\n          const saltRounds = 10;\r\n\r\n          bcrypt.hash(password, saltRounds, (error, hash) => {\r\n            if (error) {\r\n              const msg = \"Error occurs while CREATE HASH PASSWORD in # POST /user\";\r\n              console.log(error);\r\n              console.log(msg);\r\n              connection.release();\r\n              res.status(500).json({error, msg});\r\n            } else {\r\n              password = hash;\r\n\r\n              connection.beginTransaction(error => {\r\n                if (error) {\r\n                  const msg = \"Error occurs while TRANSACTION in # POST /user\";\r\n                  console.log(error);\r\n                  console.log(msg);\r\n                  connection.release();\r\n                  res.status(500).json({error, msg});\r\n                } else {\r\n                  // SHA1(\"test6\")\r\n                  // a66df261120b6c2311c6ef0b1bab4e583afcbcc0\r\n\r\n                  const query = `\r\n                  INSERT INTO user (\r\n                    account,\r\n                    name,\r\n                    nickname,\r\n                    password,\r\n                    divider,\r\n                    phone,\r\n                    zipcode,\r\n                    address1,\r\n                    address2,\r\n                    email,\r\n                    enroll_date,\r\n                    join_route\r\n                  ) VALUES (\r\n                    \"${account}\",\r\n                    \"${name}\",\r\n                    \"${nickname}\",\r\n                    \"${password}\",\r\n                    1,\r\n                    \"${phone}\",\r\n                    \"${zipcode}\",\r\n                    \"${address1}\",\r\n                    \"${address2}\",\r\n                    \"${email}\",\r\n                    now(),\r\n                    ${join_route}\r\n                  )`;\r\n\r\n                  console.log(password);\r\n\r\n                  queryConductor(connection, query).then(() => {\r\n                    connection.commit(error => {\r\n                      if (error) {\r\n                        const msg = \"Error occurs while COMMIT in # POST /user\";\r\n\r\n                        console.log(error);\r\n                        console.log(msg);\r\n                        connection.rollback(() => {\r\n                          connection.release();\r\n                          res.status(500).json({error, msg});\r\n                        })\r\n                      } else {\r\n                        let { session } = req;\r\n                        session.account = account;\r\n                        session.name = name;\r\n                        session.nickname = nickname;\r\n                        session.divider = 1;\r\n                        session.email = email;\r\n\r\n                        connection.release();\r\n                        res.end();\r\n                      }\r\n                    })\r\n                  }, error => {\r\n                    const msg = \"Error occurs while INSERT INTO user in # POST /user\";\r\n\r\n                    console.log(error);\r\n                    console.log(msg);\r\n                    connection.rollback(() => {\r\n                      connection.release();\r\n                      res.status(500).json({error, msg})\r\n                    })\r\n                  })\r\n                }\r\n              })\r\n            }\r\n          })\r\n        }\r\n      })\r\n    }).catch((error) => {\r\n      console.log(error);\r\n      connection.release();\r\n      res.status(400).json({error});\r\n    });\r\n  })\r\n})\r\n/**\r\n * @file /routes/users.js\r\n * @brief GET validate API\r\n * @author 이장호\r\n * @date 2017-11-20\r\n *\r\n * @sequence\r\n * 1. session 이 유효한지 확인\r\n * 2. 결과값 return\r\n *\r\n * @return 유효하다면 true 유효하지 않다면 false\r\n */\r\n.get('/validate', (req, res) => {\r\n  if (req.session.account) {\r\n    res.json({result: true});\r\n  } else {\r\n    res.json({result: false});\r\n  }\r\n});\r\n\r\nmodule.exports = router;"]}
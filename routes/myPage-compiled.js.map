{"version":3,"sources":["myPage.js"],"names":[],"mappings":"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","file":"myPage-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\nimport _ from 'lodash';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/order\", (req, res, next) => {\r\n  try {\r\n    pool.getConnection((err, connection) => {\r\n      if (err) throw err;\r\n      const { userId } = req.query;\r\n\r\n      const query =\r\n        `SELECT *\r\n         FROM \\`order\\`\r\n        WHERE user_id = ${userId}`;\r\n\r\n      queryConductor(connection, query)\r\n        .then(orders => {\r\n          let orderIdString = \"\";\r\n\r\n          orders.forEach((order, index, array) => {\r\n            orderIdString += index === (array.length - 1) ? order.id : `${order.id}, `;\r\n          });\r\n\r\n          const query =\r\n            `SELECT *\r\n             FROM order_detail\r\n            WHERE order_id in (${orderIdString})`;\r\n\r\n          queryConductor(connection, query)\r\n            .then(order_details => {\r\n              // order_detail의 product_id / product_option_id 별로 product, product_option에서\r\n              // 정보 가져와서 json만들어서 response해야해\r\n\r\n              const uniqProductIds = _.uniqBy(order_details, \"product_id\").map(order_detail => {\r\n                return order_detail.product_id;\r\n              });\r\n\r\n              const uniqProductOptionsIds = _.uniqBy(order_details, \"product_option_id\")\r\n                .filter(order_detail => {\r\n                  return order_detail.product_option_id !== null;\r\n                }).map(order_detail => {\r\n                  return order_detail.product_option_id;\r\n                });\r\n\r\n              let productIdString = \"\";\r\n              let productOptionIdString = \"\";\r\n\r\n              uniqProductIds.forEach((productId, index, array) => {\r\n                productIdString += index === array.length - 1 ? productId : `${productId}, `\r\n              });\r\n\r\n              uniqProductOptionsIds.forEach((productOptionId, index, array) => {\r\n                productOptionIdString += index === array.length - 1 ? productOptionId : `${productOptionId}, `\r\n              });\r\n\r\n              new Promise((resolve, reject) => {\r\n                const query =\r\n                  `SELECT *\r\n                     FROM product\r\n                    WHERE id in (${productIdString})`;\r\n\r\n                queryConductor(connection, query)\r\n                  .then(products => {\r\n                    resolve(products);\r\n                  }, err => {\r\n                    console.log(\"Error occurs while SELECT FROM product in getMyPageOrder\");\r\n                    connection.release();\r\n                    throw err;\r\n                  })\r\n              }).then(products => {\r\n                const query =\r\n                  `SELECT *\r\n                     FROM product_option\r\n                    WHERE id in (${productOptionIdString})`\r\n\r\n                return queryConductor(connection, query)\r\n                  .then(productOptions => {\r\n                    return ({products, productOptions})\r\n                  }, err => {\r\n                    console.log(\"Error occurs while SELECT FROM product_option in getMyPageOrder\");\r\n                    connection.release();\r\n                    throw err;\r\n                  })\r\n              }).then(({products, productOptions}) => {\r\n                orders.forEach(order => {\r\n                  order.order_details = order_details.filter(order_detail => {\r\n                    return order.id === order_detail.order_id;\r\n                  })\r\n                });\r\n\r\n                res.json({orders, products, productOptions});\r\n                connection.release();\r\n              });\r\n            }, err => {\r\n              console.log(\"Error occurs while SELECT FROM order_detail in getMyPageOrder\");\r\n              connection.release();\r\n              throw err;\r\n            });\r\n        }, err => {\r\n          console.log(\"Error occurs while SELECT FROM order in getMyPageOrder\");\r\n          connection.release();\r\n          throw err;\r\n        })\r\n    })\r\n  } catch(err) {\r\n    res.json({err});\r\n  }\r\n});\r\n\r\nmodule.exports = router;"]}
{"version":3,"sources":["order.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AACA;;;;AAEA,IAAM,SAAS,kBAAQ,MAAR,EAAf;;AAEA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AAClC,iBAAK,aAAL,CAAmB,UAAC,GAAD,EAAM,UAAN,EAAqB;AACtC,QAAI,GAAJ,EAAS,MAAM,GAAN;;AAET,QAAM,UAAN;;AAEA,wCAAe,UAAf,EAA2B,KAA3B,EACG,IADH,CACQ,mBAAW;AACf,UAAI,IAAJ,CAAS,EAAC,gBAAD,EAAT;AACA,iBAAW,OAAX;AACD,KAJH;AAKD,GAVD;AAWD,CAZD,EAYG,IAZH,CAYQ,GAZR,EAYa,UAAC,GAAD,EAAM,GAAN,EAAc;AACzB,MAAI;AACF,mBAAK,aAAL,CAAmB,UAAC,GAAD,EAAM,UAAN,EAAqB;AACtC,UAAI,GAAJ,EAAS,MAAM,GAAN;;AAET,UAAM,OAAO,IAAI,IAAjB;AACA,UAAM,YAAY,OAAO,IAAP,CAAY,IAAZ,EAAkB,MAAlB,CAAyB,eAAO;AAChD,eAAO,QAAQ,OAAf;AACD,OAFiB,CAAlB;;AAIA,iBAAW,gBAAX,CAA4B,eAAO;AACjC,YAAI,GAAJ,EAAS,MAAM,GAAN;;AAET,YAAI,iBAAiB,EAArB;AACA,YAAI,mBAAmB,EAAvB;;AAEA,kBAAU,OAAV,CAAkB,UAAC,GAAD,EAAS;AACzB,4BAAkB,MAAM,IAAxB;AACA,oCAAwB,KAAK,GAAL,CAAxB;AACD,SAHD;;AAKA,0BAAkB,MAAlB;AACA,4BAAoB,OAApB;;AAEA,YAAM,qDAEO,cAFP,8BAGO,gBAHP,MAAN;;AAKA,4CAAe,UAAf,EAA2B,KAA3B,EACG,IADH,CACQ,mBAAW;AACf,cAAM,UAAU,QAAQ,QAAxB;AACA,cAAM,wIAGW,OAHX,6HAKqB,KAAK,OAL1B,4CAAN;;AAQA,8CAAe,UAAf,EAA2B,KAA3B,EACG,IADH,CACQ,YAAM;AACV,gBAAM,2GAGgB,KAAK,OAHrB,2CAAN;;AAMA,gDAAe,UAAf,EAA2B,KAA3B,EACG,IADH,CACQ,YAAM;AACV,yBAAW,MAAX,CAAkB,eAAO;AACvB,oBAAI,GAAJ,EAAS;AACP,0BAAQ,GAAR,CAAY,SAAZ;AACA,6BAAW,QAAX,CAAoB,YAAM;AACxB,+BAAW,OAAX;AACA,0BAAM,GAAN;AACD,mBAHD;AAID;AACD,wBAAQ,GAAR,gBAAyB,KAAK,OAA9B;AACA,2BAAW,OAAX;AACD,eAVD;AAWD,aAbH,EAaK,eAAO;AACR,sBAAQ,GAAR,CAAY,iEAAZ;AACA,yBAAW,QAAX,CAAoB,YAAM;AACxB,2BAAW,OAAX;AACA,sBAAM,GAAN;AACD,eAHD;AAID,aAnBH;AAoBD,WA5BH,EA4BK,eAAO;AACR,oBAAQ,GAAR,CAAY,uEAAZ;AACA,uBAAW,QAAX,CAAoB,YAAM;AACxB,yBAAW,OAAX;AACA,oBAAM,GAAN;AACD,aAHD;AAID,WAlCH;AAmCD,SA9CH,EA8CK,eAAO;AACR,kBAAQ,GAAR,CAAY,gEAAZ;AACA,qBAAW,QAAX,CAAoB,YAAM;AACxB,uBAAW,OAAX;AACA,kBAAM,GAAN;AACD,WAHD;AAID,SApDH;AAqDD,OAxED;AAyED,KAjFD;AAkFD,GAnFD,CAmFE,OAAO,GAAP,EAAY;AACZ,QAAI,IAAJ,CAAS,EAAC,QAAD,EAAT;AACD;AACF,CAnGD;;AAqGA,OAAO,OAAP,GAAiB,MAAjB","file":"order-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", (req, res, next) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const query = ``;\r\n\r\n    queryConductor(connection, query)\r\n      .then(results => {\r\n        res.json({results});\r\n        connection.release();\r\n      })\r\n  })\r\n}).post(\"/\", (req, res) => {\r\n  try {\r\n    pool.getConnection((err, connection) => {\r\n      if (err) throw err;\r\n\r\n      const data = req.body;\r\n      const orderKeys = Object.keys(data).filter(key => {\r\n        return key !== \"items\"\r\n      });\r\n\r\n      connection.beginTransaction(err => {\r\n        if (err) throw err;\r\n\r\n        let orderKeyString = \"\";\r\n        let orderValueString = \"\";\r\n\r\n        orderKeys.forEach((key) => {\r\n          orderKeyString += key + \", \";\r\n          orderValueString += `\"${data[key]}\", `;\r\n        });\r\n\r\n        orderKeyString += \"date\";\r\n        orderValueString += \"now()\";\r\n\r\n        const query =\r\n          `INSERT INTO \\`order\\`\r\n                  (${orderKeyString})\r\n           VALUES (${orderValueString})`;\r\n\r\n        queryConductor(connection, query)\r\n          .then(results => {\r\n            const orderId = results.insertId;\r\n            const query =\r\n              `INSERT INTO order_detail\r\n                    (order_id, product_id, product_option_id, count)\r\n                    SELECT ${orderId}, product_id, product_option_id, count\r\n                      FROM cart_detail\r\n                     WHERE user_id = ${data.user_id}\r\n                       AND status = 0`;\r\n\r\n            queryConductor(connection, query)\r\n              .then(() => {\r\n                const query =\r\n                  `UPDATE cart_detail\r\n                      SET status = 1\r\n                    WHERE user_id = ${data.user_id}\r\n                      AND status = 0`;\r\n\r\n                queryConductor(connection, query)\r\n                  .then(() => {\r\n                    connection.commit(err => {\r\n                      if (err) {\r\n                        console.log(\"error 4\")\r\n                        connection.rollback(() => {\r\n                          connection.release();\r\n                          throw err;\r\n                        })\r\n                      }\r\n                      console.log(`user id = ${data.user_id} postOrder success`);\r\n                      connection.release();\r\n                    })\r\n                  }, err => {\r\n                    console.log(\"Error occurs while UPDATE cart_detail information in postOrder.\");\r\n                    connection.rollback(() => {\r\n                      connection.release();\r\n                      throw err;\r\n                    })\r\n                  })\r\n              }, err => {\r\n                console.log(\"Error occurs while INSERT INTO order_detail information in postOrder.\");\r\n                connection.rollback(() => {\r\n                  connection.release();\r\n                  throw err\r\n                })\r\n              })\r\n          }, err => {\r\n            console.log(\"Error occurs while INSERT INTO order information in postOrder.\");\r\n            connection.rollback(() => {\r\n              connection.release();\r\n              throw err\r\n            })\r\n          })\r\n      })\r\n    })\r\n  } catch (err) {\r\n    res.json({err});\r\n  }\r\n});\r\n\r\nmodule.exports = router;"]}
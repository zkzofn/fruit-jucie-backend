{"version":3,"sources":["order.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AACA;;;;AAEA,IAAM,SAAS,kBAAQ,MAAR,EAAf;;AAEA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAoB;AAClC,iBAAK,aAAL,CAAmB,UAAC,GAAD,EAAM,UAAN,EAAqB;AACtC,QAAI,GAAJ,EAAS,MAAM,GAAN;;AAET,QAAM,UAAN;;AAEA,wCAAe,UAAf,EAA2B,KAA3B,EACG,IADH,CACQ,mBAAW;AACf,UAAI,IAAJ,CAAS,EAAC,gBAAD,EAAT;AACA,iBAAW,OAAX;AACD,KAJH;AAKD,GAVD;AAWD,CAZD,EAYG,IAZH,CAYQ,GAZR,EAYa,UAAC,GAAD,EAAM,GAAN,EAAc;AACzB,MAAI;AACF,mBAAK,aAAL,CAAmB,UAAC,GAAD,EAAM,UAAN,EAAqB;AACtC,UAAI,GAAJ,EAAS,MAAM,GAAN;;AAET,UAAM,OAAO,IAAI,IAAjB;AACA,UAAM,YAAY,OAAO,IAAP,CAAY,IAAZ,EAAkB,MAAlB,CAAyB,eAAO;AAChD,eAAO,QAAQ,OAAf;AACD,OAFiB,CAAlB;;AAIA,iBAAW,gBAAX,CAA4B,eAAO;AACjC,YAAI,GAAJ,EAAS,MAAM,GAAN;;AAET,YAAI,iBAAiB,EAArB;AACA,YAAI,mBAAmB,EAAvB;;AAEA,kBAAU,OAAV,CAAkB,UAAC,GAAD,EAAS;AACzB,4BAAkB,MAAM,IAAxB;AACA,oCAAwB,KAAK,GAAL,CAAxB;AACD,SAHD;;AAKA,0BAAkB,MAAlB;AACA,4BAAoB,OAApB;;AAEA,YAAM,4DAEI,cAFJ,2BAGI,gBAHJ,MAAN;;AAOA,4CAAe,UAAf,EAA2B,KAA3B,EAAkC,IAAlC,CAAuC,mBAAW;AAChD,cAAM,UAAU,QAAQ,QAAxB;;AAEA;AACA,cAAM,oBAAoB,KAAK,KAAL,CAAW,GAAX,CAAe,gBAAQ;AAAA,gBACvC,OADuC,GAClB,IADkB,CACvC,OADuC;AAAA,gBAC9B,OAD8B,GAClB,IADkB,CAC9B,OAD8B;;;AAG/C,gBAAI,QAAQ,MAAR,KAAmB,CAAvB,EAA0B;AACxB,2CACE,OADF,yBAEE,QAAQ,EAFV,8CAIE,QAAQ,KAJV,yBAKE,QAAQ,IALV,yBAME,QAAQ,aAAR,CAAsB,GANxB,yBAOE,QAAQ,aAAR,CAAsB,GAPxB,yBAQE,QAAQ,aAAR,CAAsB,GARxB,yBASE,QAAQ,aAAR,CAAsB,IATxB,yBAUE,QAAQ,aAAR,CAAsB,GAVxB;AAYD,aAbD,MAaO;AACL,qBAAO,QAAQ,GAAR,CAAY,kBAAU;AAC3B,6CACA,OADA,yBAEA,QAAQ,EAFR,yBAGA,OAAO,EAHP,yBAIA,OAAO,KAJP,yBAKA,QAAQ,IALR,yBAMA,QAAQ,aAAR,CAAsB,GANtB,yBAOA,QAAQ,aAAR,CAAsB,GAPtB,yBAQA,QAAQ,aAAR,CAAsB,GARtB,yBASA,QAAQ,aAAR,CAAsB,IATtB,yBAUA,QAAQ,aAAR,CAAsB,GAVtB;AAYD,eAbM,EAaJ,IAbI,CAaC,IAbD,CAAP;AAcD;AACF,WAhCyB,EAgCvB,IAhCuB,CAgClB,IAhCkB,CAA1B;;AAkCA;AACA,cAAM,uKAGG,iBAHT;;AAKA,kBAAQ,GAAR,CAAY,KAAZ;;AAEA,8CAAe,UAAf,EAA2B,KAA3B,EAAkC,IAAlC,CAAuC,YAAM;AAC3C,gBAAM,2GAGa,KAAK,OAHlB,oCAAN;;AAMA,gDAAe,UAAf,EAA2B,KAA3B,EAAkC,IAAlC,CAAuC,YAAM;AAC3C,yBAAW,MAAX,CAAkB,eAAO;AACvB,oBAAI,GAAJ,EAAS;AACP,0BAAQ,GAAR,CAAY,uCAAZ;AACA,6BAAW,QAAX,CAAoB,YAAM;AACxB,+BAAW,OAAX;AACA,0BAAM,GAAN;AACD,mBAHD;AAID;AACD,wBAAQ,GAAR,gBAAyB,KAAK,OAA9B;AACA,2BAAW,OAAX;AACA,oBAAI,GAAJ;AACD,eAXD;AAYD,aAbD,EAaG,eAAO;AACR,sBAAQ,GAAR,CAAY,iEAAZ;AACA,yBAAW,QAAX,CAAoB,YAAM;AACxB,2BAAW,OAAX;AACA,sBAAM,GAAN;AACD,eAHD;AAID,aAnBD;AAoBD,WA3BD,EA2BG,eAAO;AACR,oBAAQ,GAAR,CAAY,uEAAZ;AACA,uBAAW,QAAX,CAAoB,YAAM;AACxB,yBAAW,OAAX;AACA,oBAAM,GAAN;AACD,aAHD;AAID,WAjCD;AAkCD,SAhFD,EAgFG,eAAO;AACR,kBAAQ,GAAR,CAAY,gEAAZ;AACA,qBAAW,QAAX,CAAoB,YAAM;AACxB,uBAAW,OAAX;AACA,kBAAM,GAAN;AACD,WAHD;AAID,SAtFD;AAuFD,OA5GD;AA6GD,KArHD;AAsHD,GAvHD,CAuHE,OAAO,KAAP,EAAc;AACd,YAAQ,GAAR,CAAY,KAAZ;AACA,QAAI,MAAJ,CAAW,GAAX,EAAgB,IAAhB,CAAqB,EAAC,YAAD,EAArB;AACD;AACF,CAxID;;AA0IA,OAAO,OAAP,GAAiB,MAAjB","file":"order-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", (req, res, next) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const query = ``;\r\n\r\n    queryConductor(connection, query)\r\n      .then(results => {\r\n        res.json({results});\r\n        connection.release();\r\n      })\r\n  })\r\n}).post(\"/\", (req, res) => {\r\n  try {\r\n    pool.getConnection((err, connection) => {\r\n      if (err) throw err;\r\n\r\n      const data = req.body;\r\n      const orderKeys = Object.keys(data).filter(key => {\r\n        return key !== \"items\"\r\n      });\r\n\r\n      connection.beginTransaction(err => {\r\n        if (err) throw err;\r\n\r\n        let orderKeyString = \"\";\r\n        let orderValueString = \"\";\r\n\r\n        orderKeys.forEach((key) => {\r\n          orderKeyString += key + \", \";\r\n          orderValueString += `\"${data[key]}\", `;\r\n        });\r\n\r\n        orderKeyString += \"date\";\r\n        orderValueString += \"now()\";\r\n\r\n        const query = `\r\n        INSERT INTO \\`order\\`\r\n               (${orderKeyString})\r\n        VALUES (${orderValueString})`;\r\n\r\n\r\n\r\n        queryConductor(connection, query).then(results => {\r\n          const orderId = results.insertId;\r\n\r\n          // order_detail 에 cart에서 구매하는거 아니더라도 정보넣어줘야해\r\n          const orderDetailValues = data.items.map(item => {\r\n            const { product, options } = item;\r\n\r\n            if (options.length === 0) {\r\n              return `(\r\n              ${orderId},\r\n              ${product.id},\r\n              NULL,\r\n              ${product.count},\r\n              ${product.days},\r\n              ${product.daysCondition.mon},\r\n              ${product.daysCondition.tue},\r\n              ${product.daysCondition.wed},\r\n              ${product.daysCondition.thur},\r\n              ${product.daysCondition.fri}\r\n            )`\r\n            } else {\r\n              return options.map(option => {\r\n                return `(\r\n              ${orderId},\r\n              ${product.id},\r\n              ${option.id},\r\n              ${option.count},\r\n              ${product.days},\r\n              ${product.daysCondition.mon},\r\n              ${product.daysCondition.tue},\r\n              ${product.daysCondition.wed},\r\n              ${product.daysCondition.thur},\r\n              ${product.daysCondition.fri}\r\n            )`;\r\n              }).join(\", \");\r\n            }\r\n          }).join(\", \");\r\n\r\n          // cart_detail에서 가져와서 넣는게 아니라 그냥 넣어줘야해\r\n          const query = `\r\n          INSERT INTO order_detail\r\n                 (order_id, product_id, product_option_id, count, days, mon, tue, wed, thur, fri)\r\n          VALUES ${orderDetailValues}`;\r\n\r\n          console.log(query);\r\n\r\n          queryConductor(connection, query).then(() => {\r\n            const query = `\r\n            UPDATE cart_detail\r\n               SET status = 1\r\n             WHERE user_id = ${data.user_id}\r\n               AND status = 0`;\r\n\r\n            queryConductor(connection, query).then(() => {\r\n              connection.commit(err => {\r\n                if (err) {\r\n                  console.log(\"Error ccurs while COMMIT in postOrder\");\r\n                  connection.rollback(() => {\r\n                    connection.release();\r\n                    throw err;\r\n                  })\r\n                }\r\n                console.log(`user id = ${data.user_id} postOrder success`);\r\n                connection.release();\r\n                res.end();\r\n              })\r\n            }, err => {\r\n              console.log(\"Error occurs while UPDATE cart_detail information in postOrder.\");\r\n              connection.rollback(() => {\r\n                connection.release();\r\n                throw err;\r\n              })\r\n            })\r\n          }, err => {\r\n            console.log(\"Error occurs while INSERT INTO order_detail information in postOrder.\");\r\n            connection.rollback(() => {\r\n              connection.release();\r\n              throw err\r\n            })\r\n          })\r\n        }, err => {\r\n          console.log(\"Error occurs while INSERT INTO order information in postOrder.\");\r\n          connection.rollback(() => {\r\n            connection.release();\r\n            throw err\r\n          })\r\n        })\r\n      })\r\n    })\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(500).json({error});\r\n  }\r\n});\r\n\r\nmodule.exports = router;"]}
{"version":3,"sources":["order.js"],"names":[],"mappings":"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","file":"order-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", (req, res, next) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const query = ``;\r\n\r\n    queryConductor(connection, query)\r\n      .then(results => {\r\n        res.json({results});\r\n        connection.release();\r\n      })\r\n  })\r\n}).post(\"/\", (req, res) => {\r\n  const { orderInfo, fromCart, items } = req.body;\r\n  const orderKeys = Object.keys(orderInfo);\r\n\r\n  pool.getConnection((error, connection) => {\r\n    if (error) {\r\n      const msg = \"Error occurs while pool.getConnection in # POST /order\";\r\n      console.log(error);\r\n      console.log(msg);\r\n      connection.release();\r\n      res.status(500).json({error, msg});\r\n    } else {\r\n      connection.beginTransaction(async error => {\r\n        if (error) {\r\n          const msg = \"Error occurs while beginTransaction in # POST /order\";\r\n          console.log(error);\r\n          console.log(msg);\r\n          connection.release();\r\n          res.status(500).json({error,msg});\r\n        } else {\r\n          await new Promise((resolve, reject) => {\r\n            let orderKeyString = \"\";\r\n            let orderValueString = \"\";\r\n\r\n            orderKeys.forEach((key) => {\r\n              orderKeyString += key + \", \";\r\n              orderValueString += `\"${orderInfo[key]}\", `;\r\n            });\r\n\r\n            orderKeyString += \"date\";\r\n            orderValueString += \"now()\";\r\n\r\n            const query = `\r\n            INSERT INTO \\`order\\`\r\n                   (${orderKeyString})\r\n            VALUES (${orderValueString})`;\r\n\r\n            queryConductor(connection, query).then(results => {\r\n              resolve(results);\r\n            }).catch(error => {\r\n              const msg = \"Error occurs while INSERT INTO order information in # POST /order\";\r\n              reject({error, msg});\r\n            });\r\n          }).then(results => {\r\n            const orderId = results.insertId;\r\n            const orderDetailValues = items.map(item => {\r\n              const {product, options} = item;\r\n\r\n              if (options.length === 0) {\r\n                return `(\r\n                  ${orderId},\r\n                  ${product.id},\r\n                  NULL,\r\n                  ${product.count},\r\n                  ${product.days},\r\n                  ${product.daysCondition.mon},\r\n                  ${product.daysCondition.tue},\r\n                  ${product.daysCondition.wed},\r\n                  ${product.daysCondition.thur},\r\n                  ${product.daysCondition.fri}\r\n                )`\r\n              } else {\r\n                return options.map(option => {\r\n                  return `(\r\n                    ${orderId},\r\n                    ${product.id},\r\n                    ${option.id},\r\n                    ${option.count},\r\n                    ${product.days},\r\n                    ${product.daysCondition.mon},\r\n                    ${product.daysCondition.tue},\r\n                    ${product.daysCondition.wed},\r\n                    ${product.daysCondition.thur},\r\n                    ${product.daysCondition.fri}\r\n                  )`;\r\n                }).join(\", \");\r\n              }\r\n            }).join(\", \");\r\n\r\n            const query = `\r\n            INSERT INTO order_detail\r\n                   (order_id, product_id, product_option_id, count, days, mon, tue, wed, thur, fri)\r\n            VALUES ${orderDetailValues}`;\r\n\r\n            return queryConductor(connection, query).catch(error => {\r\n              const msg = \"Error occurs while INSERT INTO order_detail information in # POST /order\";\r\n              throw {error, msg};\r\n            })\r\n          }).then(() => {\r\n            if (fromCart) {\r\n              const query = `\r\n              UPDATE cart_detail\r\n                 SET status = 1\r\n               WHERE user_id = ${orderInfo.user_id}\r\n                 AND status = 0`;\r\n\r\n              return queryConductor(connection, query).catch(error => {\r\n                const msg = \"Error occurs while UPDATE cart_detail information in # POST /order\";\r\n                throw {error, msg};\r\n              });\r\n            }\r\n          }).then(() => {\r\n            connection.commit(error => {\r\n              if (error) {\r\n                const msg = \"Error occurs while COMMIT in # POST /order\";\r\n                connection.release();\r\n                res.status(500).json({error, msg});\r\n              } else {\r\n                connection.release();\r\n                res.end();\r\n              }\r\n            })\r\n          }).catch(({error, msg}) => {\r\n            connection.rollback(() => {\r\n              console.log(error);\r\n              console.log(msg);\r\n              connection.release();\r\n              res.status(500).json({error, msg});\r\n            });\r\n          });\r\n        }\r\n      })\r\n    }\r\n  })\r\n});\r\n\r\nmodule.exports = router;"]}
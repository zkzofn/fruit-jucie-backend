{"version":3,"sources":["cart.js"],"names":[],"mappings":"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","file":"cart-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\nimport { getAuthUser } from './auth';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", (req, res) => {\r\n  const sessionKey = req.headers.authorization;\r\n  const sessionUser = getAuthUser(sessionKey);\r\n\r\n  // select * 로 검색한 애들 전부다 필요한 것들만 select 걸러줘야 해\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n    \r\n    const userId = sessionUser.id;\r\n\r\n    new Promise((resolve, reject) => {\r\n      const query = `\r\n      SELECT * \r\n        FROM cart_detail\r\n       WHERE user_id = ${userId}\r\n         AND status = 0`;\r\n\r\n      queryConductor(connection, query).then(cartProducts => {\r\n        resolve({cartProducts});\r\n      })\r\n    }).then(({cartProducts}) => {\r\n      const query =\r\n        `SELECT product_id\r\n           FROM cart_detail\r\n          WHERE user_id = ${userId}\r\n            AND status = 0\r\n          GROUP BY product_id`;\r\n\r\n      return queryConductor(connection, query).then(distinctCartProducts => {\r\n        return ({cartProducts, distinctCartProducts})\r\n      })\r\n    }).then(({cartProducts, distinctCartProducts}) => {\r\n      const query = `\r\n      SELECT B.* \r\n        FROM cart_detail A INNER JOIN product B\r\n          ON A.product_id = B.id\r\n       WHERE A.user_id = ${userId}\r\n         AND status = 0\r\n       GROUP BY B.id`;\r\n\r\n      return queryConductor(connection, query).then(products => {\r\n        return ({cartProducts, distinctCartProducts, products})\r\n      });\r\n    }).then(({cartProducts, distinctCartProducts, products}) => {\r\n      const query = `\r\n      SELECT B.*\r\n        FROM cart_detail A INNER JOIN product_option B\r\n          ON A.product_option_id = B.id\r\n       WHERE A.user_id = ${userId}\r\n         AND status = 0\r\n       GROUP BY B.id`;\r\n\r\n      return queryConductor(connection, query).then(productOptions => {\r\n        return ({cartProducts, distinctCartProducts, products, productOptions})\r\n      })\r\n    }).then(({cartProducts, distinctCartProducts, products, productOptions}) => {\r\n      return new Promise(resolve => {\r\n        const cart = distinctCartProducts.map(distinctCartProduct => {\r\n          distinctCartProduct[\"product\"] = products.filter(product => {\r\n            return product.id === distinctCartProduct.product_id;\r\n          })[0];\r\n\r\n          distinctCartProduct[\"product\"][\"count\"] = cartProducts.filter(cartProduct => {\r\n            return distinctCartProduct.product_id === cartProduct.product_id;\r\n          })[0].count;\r\n\r\n          distinctCartProduct[\"options\"] = cartProducts.filter(cartProduct => {\r\n            return distinctCartProduct.product_id === cartProduct.product_id && cartProduct.product_option_id !== null;\r\n          }).map(cartProduct => {\r\n            const cartId = cartProduct.id;\r\n            const count = cartProduct.count;\r\n\r\n            cartProduct = productOptions.filter(productOption => {\r\n              return productOption.id === cartProduct.product_option_id;\r\n            })[0];\r\n\r\n            cartProduct[\"cartId\"] = cartId;\r\n            cartProduct[\"count\"] = count;\r\n\r\n            return cartProduct;\r\n          });\r\n\r\n          return distinctCartProduct;\r\n        });\r\n\r\n        resolve(cart);\r\n      })\r\n    }).then(cart => {\r\n      res.json({cart});\r\n      connection.release();\r\n    })\r\n  })\r\n}).post(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const sessionKey = req.headers.authorization;\r\n    const sessionUser = getAuthUser(sessionKey);\r\n    const userId = sessionUser.id;\r\n\r\n    const { product, selectedOptions } = req.body;\r\n    const productOptionIdsString = selectedOptions.join(', ');\r\n    const productOptionCondition = `AND product_option_id in (${productOptionIdsString})`;\r\n    let daysCount = 0;\r\n    let daysCondition = \"\";\r\n    let daysKeys = \"\";\r\n    let daysValues = \"\";\r\n\r\n    Object.keys(product.daysCondition).forEach(day => {\r\n      if (product.daysCondition[day]) {\r\n        daysKeys += ` ${day}, `;\r\n        daysValues += ` true, `;\r\n        daysCondition += ` AND ${day} = true `;\r\n        daysCount++;\r\n      }\r\n    });\r\n\r\n    connection.beginTransaction(err => {\r\n      if (err) {\r\n        return connection.rollback(() => {\r\n          throw err;\r\n        })\r\n      }\r\n\r\n      let query = `\r\n      SELECT id, product_option_id\r\n        FROM cart_detail\r\n       WHERE user_id = ${userId}\r\n         AND product_id = ${product.id}\r\n         ${selectedOptions.length > 0 ? productOptionCondition : \"\"}\r\n         AND status = 0\r\n         ${daysCount > 0 ? daysCondition : \"\"}\r\n         `;\r\n\r\n\r\n      queryConductor(connection, query).catch(err => {\r\n        if (err) {\r\n          return connection.rollback(() => {\r\n            throw err;\r\n          })\r\n        }\r\n      }).then(results => {\r\n        if (selectedOptions.length === 0 && results.length === 0) {\r\n          const query = `\r\n          INSERT INTO cart_detail\r\n                 (user_id, product_id, count, status, ${daysCount > 0 ? daysKeys : \"\"} date)\r\n          VALUES (${userId}, ${product.id}, ${product.count}, 0, ${daysCount > 0 ? daysValues : \"\"} now())`;\r\n\r\n          queryConductor(connection, query).catch(err => {\r\n            if (err) {\r\n              return connection.rollback(() => {\r\n                throw err;\r\n              })\r\n            }\r\n          }).then(insertResults => {\r\n            connection.commit(err => {\r\n              if (err) {\r\n                return connection.rollback(() => {\r\n                  throw err;\r\n                })\r\n              }\r\n\r\n              // 이 부분은 아마 insertResults 값 없을거야 확인해보고 수정해\r\n              res.json({insertResults});\r\n              connection.release();\r\n            })\r\n\r\n          })\r\n        } else if (selectedOptions.length === 0 && results.length > 0) {\r\n          const query = `\r\n          UPDATE cart_detail\r\n            SET count = count + ${product.count}, date = now()\r\n          WHERE id = ${results[0].id}`;\r\n\r\n          queryConductor(connection, query).catch((err) => {\r\n            if (err) {\r\n              return connection.rollback(() => {\r\n                throw err;\r\n              })\r\n            }\r\n          }).then(updateResults => {\r\n            connection.commit(err => {\r\n              if (err) {\r\n                return connection.rollback(() => {\r\n                  throw err;\r\n                })\r\n              }\r\n\r\n              // 이 부분은 아마 insertResults 값 없을거야 확인해보고 수정해\r\n              res.json({updateResults});\r\n              connection.release();\r\n            })\r\n          })\r\n        } else if (selectedOptions.length > 0) {\r\n          new Promise(resolve => {\r\n            for (let i = 0; i < selectedOptions.length; i++) {\r\n              const lengthChecker = results.filter(result => {\r\n                return result.product_option_id === selectedOptions[i].id\r\n              });\r\n\r\n              if (lengthChecker.length === 0) {\r\n                const query = `\r\n                INSERT INTO cart_detail\r\n                       (user_id, product_id, product_option_id, count, status, date)\r\n                VALUES (${userId}, ${product.id}, ${selectedOptions[i].id}, ${selectedOptions[i].count}, 0, now())`;\r\n\r\n                queryConductor(connection, query).catch(err => {\r\n                  if (err) {\r\n                    return connection.rollback(() => {\r\n                      throw err;\r\n                    })\r\n                  }\r\n                }).then(() => {\r\n                  if (i === selectedOptions.length - 1)\r\n                    resolve()\r\n                })\r\n              } else {\r\n                const query = `\r\n                UPDATE cart_detail\r\n                   SET count = count + ${selectedOptions[i].count}\r\n                 WHERE id = ${lengthChecker[0].id}`;\r\n\r\n                queryConductor(connection, query).catch(err => {\r\n                  if (err) {\r\n                    return connection.rollback(() => {\r\n                      throw err;\r\n                    })\r\n                  }\r\n                }).then(() => {\r\n                  if (i === selectedOptions.length - 1)\r\n                    resolve()\r\n                })\r\n              }\r\n            }\r\n          }).then(() => {\r\n            connection.commit(err => {\r\n              if (err) {\r\n                return connection.rollback(() => {\r\n                  throw err;\r\n                })\r\n              }\r\n\r\n              // 이 부분 어떻게 해야 좋을지 좀 생각해봐봐\r\n              res.json({result: \"success\"});\r\n              connection.release();\r\n            })\r\n          })\r\n        }\r\n      })\r\n    });\r\n  })\r\n}).patch(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const { cartId, value } = req.body;\r\n    const query = `\r\n    UPDATE cart_detail\r\n       SET count = count + ${value}\r\n     WHERE id = ${cartId}`;\r\n\r\n    queryConductor(connection, query).then(() => {\r\n      console.log(\"success\");\r\n      res.json({});\r\n      connection.release();\r\n    }).catch(err => {\r\n      console.log(\"fail\");\r\n      res.status(500).json({err});\r\n      connection.release();\r\n    })\r\n  });\r\n}).delete(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const { cartId } = req.body;\r\n    const query = `\r\n    UPDATE cart_detail\r\n       SET status = 2\r\n     WHERE id = ${cartId}`;\r\n\r\n    queryConductor(connection, query).then(() => {\r\n      res.json({});\r\n      connection.release();\r\n    }).catch(err => {\r\n      res.json({err});\r\n      connection.release();\r\n    });\r\n  })\r\n});\r\n\r\nmodule.exports = router;"]}
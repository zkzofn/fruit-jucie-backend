{"version":3,"sources":["cart.js"],"names":[],"mappings":"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","file":"cart-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n    const { userId } = req.query;\r\n\r\n    new Promise((resolve, reject) => {\r\n      const query =\r\n        `SELECT * \r\n           FROM cart_detail\r\n          WHERE user_id = ${userId}\r\n            AND status = 0`;\r\n\r\n      queryConductor(connection, query)\r\n        .then(cartProducts => {\r\n          resolve({cartProducts});\r\n        })\r\n    }).then(({cartProducts}) => {\r\n      const query =\r\n        `SELECT id, product_id, product_option_id\r\n           FROM cart_detail\r\n          WHERE user_id = ${userId}\r\n            AND status = 0\r\n          GROUP BY product_id`;\r\n\r\n      return queryConductor(connection, query)\r\n        .then(distinctCartProducts => {\r\n          return ({cartProducts, distinctCartProducts})\r\n        })\r\n    }).then(({cartProducts, distinctCartProducts}) => {\r\n      const query =\r\n        `SELECT B.* \r\n           FROM cart_detail A INNER JOIN product B\r\n             ON A.product_id = B.id\r\n          WHERE A.user_id = ${userId}\r\n            AND status = 0\r\n          GROUP BY B.id`;\r\n\r\n      return queryConductor(connection, query)\r\n        .then(products => {\r\n          return ({cartProducts, distinctCartProducts, products})\r\n        });\r\n    }).then(({cartProducts, distinctCartProducts, products}) => {\r\n      const query =\r\n        `SELECT B.*\r\n           FROM cart_detail A INNER JOIN product_option B\r\n             ON A.product_option_id = B.id\r\n          WHERE A.user_id = ${userId}\r\n            AND status = 0\r\n          GROUP BY B.id`;\r\n\r\n      return queryConductor(connection, query)\r\n        .then(productOptions => {\r\n          return ({cartProducts, distinctCartProducts, products, productOptions})\r\n        })\r\n    }).then(({cartProducts, distinctCartProducts, products, productOptions}) => {\r\n      return new Promise(resolve => {\r\n\r\n        const cart = distinctCartProducts.map((distinctCartProduct) => {\r\n          distinctCartProduct[\"product\"] = products.filter(product => {\r\n            return product.id === distinctCartProduct.product_id;\r\n          })[0];\r\n\r\n          distinctCartProduct[\"product\"][\"count\"] = cartProducts.filter(cartProduct => {\r\n            return distinctCartProduct.product_id === cartProduct.product_id;\r\n          })[0].count;\r\n\r\n          distinctCartProduct[\"options\"] = cartProducts.filter(cartProduct => {\r\n            return distinctCartProduct.product_id === cartProduct.product_id && cartProduct.product_option_id !== null;\r\n          }).map(cartProduct => {\r\n            const cartId = cartProduct.id;\r\n            const count = cartProduct.count;\r\n\r\n            cartProduct = productOptions.filter(productOption => {\r\n              return productOption.id === cartProduct.product_option_id;\r\n            })[0];\r\n\r\n            cartProduct[\"cartId\"] = cartId;\r\n            cartProduct[\"count\"] = count;\r\n\r\n            return cartProduct;\r\n          });\r\n\r\n          return distinctCartProduct;\r\n        });\r\n\r\n        resolve(cart);\r\n      })\r\n    }).then(cart => {\r\n      res.json({cart});\r\n      connection.release();\r\n    })\r\n  })\r\n}).post(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const { userId, product, selectedOptions } = req.body;\r\n\r\n    let productOptionCondition = \"AND product_option_id in (\";\r\n\r\n    selectedOptions.forEach((selectedOption, index) => {\r\n      productOptionCondition = `${productOptionCondition}${selectedOption.id}`;\r\n\r\n      if (index === selectedOptions.length - 1) {\r\n        productOptionCondition = `${productOptionCondition})`;\r\n      } else {\r\n        productOptionCondition = `${productOptionCondition},`;\r\n      }\r\n    });\r\n\r\n    const query =\r\n      `SELECT * \r\n         FROM cart_detail\r\n        WHERE user_id = ${userId}\r\n          AND product_id = ${product.id}\r\n          ${selectedOptions.length > 0 ? productOptionCondition : \"\"}\r\n          AND status = 0`;\r\n\r\n    queryConductor(connection, query)\r\n      .then(results => {\r\n        if (selectedOptions.length === 0 && results.length === 0) {\r\n          const query =\r\n            `INSERT INTO cart_detail\r\n                    (user_id, product_id, count, status, date)\r\n             VALUES (${userId}, ${product.id}, ${product.count}, 0, now())`;\r\n\r\n            queryConductor(connection, query)\r\n              .then(insertResults => {\r\n\r\n                // 이 부분은 아마 insertResults 값 없을거야 확인해보고 수정해\r\n                res.json({insertResults});\r\n                connection.release();\r\n              })\r\n        } else if (selectedOptions.length === 0 && results.length > 0) {\r\n          const query =\r\n            `UPDATE cart_detail\r\n                SET count = count + ${product.count}\r\n              WHERE id = ${results[0].id}`;\r\n\r\n          queryConductor(connection, query)\r\n            .then(updateResults => {\r\n              // 이 부분은 아마 insertResults 값 없을거야 확인해보고 수정해\r\n              res.json({updateResults});\r\n              connection.release();\r\n            })\r\n        } else if (selectedOptions.length > 0) {\r\n          new Promise(resolve => {\r\n            for (let i = 0; i < selectedOptions.length; i++) {\r\n              const lengthChecker = results.filter(result => {\r\n                return result.product_option_id === selectedOptions[i].id\r\n              });\r\n\r\n              if (lengthChecker.length === 0) {\r\n                const query =\r\n                  `INSERT INTO cart_detail\r\n                          (user_id, product_id, product_option_id, count, status, date)\r\n                   VALUES (${userId}, ${product.id}, ${selectedOptions[i].id}, ${selectedOptions[i].count}, 0, now())`;\r\n\r\n                queryConductor(connection, query)\r\n              } else {\r\n                const query =\r\n                  `UPDATE cart_detail\r\n                      SET count = count + ${selectedOptions[i].count}\r\n                    WHERE id = ${lengthChecker[0].id}`;\r\n\r\n                queryConductor(connection, query)\r\n              }\r\n            }\r\n            resolve()\r\n          }).then(() => {\r\n            // 이 부분 어떻게 해야 좋을지 좀 생각해봐봐\r\n            res.json({result: \"success\"});\r\n            connection.release();\r\n          });\r\n        }\r\n      })\r\n  })\r\n}).patch(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const { cartId, value } = req.body;\r\n    const query =\r\n      `UPDATE cart_detail\r\n          SET count = count + ${value}\r\n        WHERE id = ${cartId}`;\r\n\r\n    queryConductor(connection, query)\r\n      .then(() => {\r\n        res.json({});\r\n        connection.release();\r\n      }).catch(err => {\r\n        res.json({err});\r\n        connection.release();\r\n      })\r\n  });\r\n}).delete(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n\r\n    const { cartId } = req.body;\r\n    const query =\r\n      `UPDATE cart_detail\r\n          SET status = 2\r\n        WHERE id = ${cartId}`;\r\n\r\n    queryConductor(connection, query)\r\n      .then(() => {\r\n        res.json({});\r\n        connection.release();\r\n      }).catch(err => {\r\n        res.json({err});\r\n        connection.release();\r\n      });\r\n  })\r\n});\r\n\r\nmodule.exports = router;"]}
{"version":3,"sources":["cart.js"],"names":[],"mappings":";;AAAA;;;;AACA;;AACA;;;;;;AAEA,IAAM,SAAS,kBAAQ,MAAR,EAAf;;AAEA,OAAO,GAAP,CAAW,GAAX,EAAgB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC5B,iBAAK,aAAL,CAAmB,UAAC,GAAD,EAAM,UAAN,EAAqB;AACtC,QAAI,GAAJ,EAAS,MAAM,GAAN;AAD6B,QAE9B,MAF8B,GAEnB,IAAI,KAFe,CAE9B,MAF8B;;;AAItC,QAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/B,UAAM,+EAGgB,MAHhB,iCAAN;;AAMA,0CAAe,UAAf,EAA2B,KAA3B,EACG,IADH,CACQ,wBAAgB;AACpB,gBAAQ,YAAR;AACD,OAHH;AAID,KAXD,EAWG,IAXH,CAWQ,UAAC,YAAD,EAAkB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAa,OAAb,CAAqB,UAAC,WAAD,EAAc,KAAd,EAAqB,GAArB,EAA6B;AAChD,YAAM,6EAGa,YAAY,UAH/B;;AAKE,mBAAW,KAAX,CAAiB,KAAjB,EAAwB,UAAC,KAAD,EAAQ,OAAR,EAAoB;AAC1C,cAAI,KAAJ,EAAW,MAAM,KAAN;;AAEX,sBAAY,SAAZ,IAAyB,QAAQ,CAAR,CAAzB;;AAEA,cAAI,SAAS,IAAI,MAAJ,GAAa,CAA1B,EAA6B;AAC3B,mBAAO,QAAQ,OAAR,CAAgB,GAAhB,CAAP;AACD;AACF,SARD;AASH,OAfD;AAgBD,KA3CD,EA2CG,IA3CH,CA2CQ,gBAAQ;AACd,cAAQ,GAAR,CAAY,IAAZ;AACA,UAAI,IAAJ,CAAS,EAAC,UAAD,EAAT;AACA,iBAAW,OAAX;AACD,KA/CD;AAgDD,GApDD;AAqDD,CAtDD,EAsDG,IAtDH,CAsDQ,GAtDR,EAsDa,UAAC,GAAD,EAAM,GAAN,EAAc;AACzB,iBAAK,aAAL,CAAmB,UAAC,GAAD,EAAM,UAAN,EAAqB;AAAA,QAC9B,MAD8B,GACnB,IAAI,IADe,CAC9B,MAD8B;AAAA,QAE9B,OAF8B,GAElB,IAAI,IAFc,CAE9B,OAF8B;AAAA,QAG9B,eAH8B,GAGV,IAAI,IAHM,CAG9B,eAH8B;;;AAKtC,QAAI,gBAAgB,MAAhB,KAA2B,CAA/B,EAAkC;AAChC,UAAM,mHAGO,MAHP,UAGkB,QAAQ,EAH1B,UAGiC,QAAQ,KAHzC,gBAAN;;AAKA,0CAAe,UAAf,EAA2B,KAA3B,EACG,IADH,CACQ,mBAAW;;AAEf,YAAI,IAAJ,CAAS,EAAC,gBAAD,EAAT;AACA,mBAAW,OAAX;AACD,OALH;AAMD,KAZD,MAYO;AACL,UAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC/B,YAAI,aAAa,EAAjB;;AAEA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,gBAAgB,MAApC,EAA4C,GAA5C,EAAiD;AAC/C,cAAM,+IAGO,MAHP,UAGkB,QAAQ,EAH1B,UAGiC,gBAAgB,CAAhB,EAAmB,EAHpD,UAG2D,gBAAgB,CAAhB,EAAmB,KAH9E,gBAAN;AAIA,8CAAe,UAAf,EAA2B,MAA3B,EACG,IADH,CACQ,mBAAW;AACf,sDAAiB,UAAjB,IAA6B,OAA7B;AACD,WAHH;AAIE;AACA;AACA;AACA;AACH;AACD,gBAAQ,UAAR;AACD,OAlBD,EAkBG,IAlBH,CAkBQ,sBAAc;AACpB,YAAI,IAAJ,CAAS,EAAC,sBAAD,EAAT;AACA,mBAAW,OAAX;AACD,OArBD;AAsBD;AACF,GAzCD;AA0CD,CAjGD;;AAmGA,OAAO,OAAP,GAAiB,MAAjB","file":"cart-compiled.js","sourcesContent":["import express from 'express';\r\nimport { pool } from './DBconfig';\r\nimport { queryConductor } from './queryConductor';\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    if (err) throw err;\r\n    const { userId } = req.query;\r\n\r\n    new Promise((resolve, reject) => {\r\n      const query =\r\n        `SELECT * \r\n           FROM cart_detail\r\n          WHERE user_id = ${userId}\r\n            AND status = 0`;\r\n\r\n      queryConductor(connection, query)\r\n        .then(cartProducts => {\r\n          resolve(cartProducts);\r\n        })\r\n    }).then((cartProducts) => {\r\n      // const cart = cartProducts.map(cartProduct => {\r\n      //   const query =\r\n      //     `SELECT *\r\n      //      FROM product\r\n      //     WHERE id = ${cartProduct.product_id}`;\r\n      //\r\n      //   connection.query(query, (error, results) => {\r\n      //     if (error) throw error;\r\n      //\r\n      //     cartProduct[\"product\"] = results[0];\r\n      //\r\n      //     return cartProduct;\r\n      //   });\r\n      // });\r\n\r\n      cartProducts.forEach((cartProduct, index, arr) => {\r\n        const query =\r\n            `SELECT *\r\n               FROM product\r\n              WHERE id = ${cartProduct.product_id}`;\r\n\r\n          connection.query(query, (error, results) => {\r\n            if (error) throw error;\r\n\r\n            cartProduct[\"product\"] = results[0];\r\n\r\n            if (index == arr.length - 1) {\r\n              return Promise.resolve(arr);\r\n            }\r\n          });\r\n      })\r\n    }).then(cart => {\r\n      console.log(cart);\r\n      res.json({cart});\r\n      connection.release();\r\n    })\r\n  })\r\n}).post(\"/\", (req, res) => {\r\n  pool.getConnection((err, connection) => {\r\n    const { userId } = req.body;\r\n    const { product } = req.body;\r\n    const { selectedOptions } = req.body;\r\n\r\n    if (selectedOptions.length === 0) {\r\n      const query =\r\n        `INSERT INTO cart_detail\r\n                (user_id, product_id, count, status, date)\r\n         VALUES (${userId}, ${product.id}, ${product.count}, 0, now())`;\r\n\r\n      queryConductor(connection, query)\r\n        .then(results => {\r\n\r\n          res.json({results});\r\n          connection.release();\r\n        })\r\n    } else {\r\n      new Promise((resolve, reject) => {\r\n        let resResults = [];\r\n\r\n        for (let i = 0; i < selectedOptions.length; i++) {\r\n          const query =\r\n            `INSERT INTO cart_detail\r\n                    (user_id, product_id, product_option_id, count, status, date)\r\n             VALUES (${userId}, ${product.id}, ${selectedOptions[i].id}, ${selectedOptions[i].count}, 1, now())`;\r\n          queryConductor(connection, query)\r\n            .then(results => {\r\n              resResults = [...resResults, results]\r\n            })\r\n            // .catch(error => {\r\n            //   res.json({error});\r\n            //   connection.release();\r\n            // })\r\n        }\r\n        resolve(resResults)\r\n      }).then(resResults => {\r\n        res.json({resResults});\r\n        connection.release();\r\n      })\r\n    }\r\n  })\r\n});\r\n\r\nmodule.exports = router;"]}